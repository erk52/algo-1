
class Percolation 
	{
		private int[] grid;
		private int TOP;
		private int BOTTOM;
		private int n;
		private WeightedQuickUnionUF myUnion;

		public Percolation(int N){
			n = N;
			grid = new int[n*n];
			for (int i = 0; i < n*n; i++){
				grid[i] = 0;
			}
			myUnion = new WeightedQuickUnionUF(n*n+2);
			TOP = n*n;
			BOTTOM = n*n+1;
			for (int j = 0; j < n; j++){
				//Connect first row to top
				myUnion.union(TOP,j);
				myUnion.union(BOTTOM, n*n-1-j);
			}
		}

		private int rcToIndex(int row, int col){
			int index = (row - 1)*n + (col-1);
			return index;
		}

		public void open(int row, int col){
			int index = (row - 1)*n + (col-1);
			grid[index] = 1;
			//Check neighbors
			int neigh;
			if ((row+1) <= n){
				neigh = row*n + col-1;
				if ( grid[neigh] == 1 ){
					myUnion.union(index,neigh);
				}
			}
			if ((row-1) >= 1){
				neigh = (row-2)*n + col-1;
				if ( grid[neigh] == 1 ){
					myUnion.union(index,neigh);
				}
			}
			if ((col+1) <= n){
				neigh = (row - 1)*n + (col);
				if ( grid[neigh] == 1 ){
					myUnion.union(index,neigh);
				}
			}
			if ((col-1) >= 1){
				neigh = (row - 1)*n + (col-2);
				if ( grid[neigh] == 1 ){
					myUnion.union(index,neigh);
				}
			}



		}
		public boolean isOpen(int row, int col){
			int index = (row - 1)*n + (col-1);
			return grid[index] == 1;
		}
		public boolean isFull(int row, int col){
			int index = (row - 1)*n + (col-1);
			return myUnion.connected(index, TOP);
		}
		public int numberOfOpenSites(){
			int arr_sum = 0;
			for (int i=0;i<n*n;i++){
				arr_sum += grid[i];
			}
			return arr_sum;
		}
		public boolean percolates(){
			return myUnion.connected(TOP,BOTTOM);
		}
		public void printGrid(){
			for (int i = 0; i<n*n; i++){
				System.out.println(grid[i]);
			}
		}
	}
class WeightedQuickUnionUF
	{
		private int[] id;
		private int[] size;

		public WeightedQuickUnionUF(int N){
			id = new int[N];
			size = new int[N];
			for (int i = 0; i < N; i++){
				id[i] = i;
				size[i] = 1;
			}
		}
		private int root(int i){
			while (i != id[i]){
				i = id[i];
			}
			return i;
		}

		public boolean connected(int p, int q){
			return root(p) == root(q);
		}

		public void union(int p, int q){
			int i = root(p);
			int j = root(q);
			if (i == j) return;
			if (size[i] < size[j]){
				id[i] = j;
				size[j] += size[i];
			}
			else {
				id[j] = i;
				size[i] += size[j];
			}
		}
	}

class PercolationStats 
{
	private int N;
	private int T;
	private int[] results;
	
	public PercolationStats(int n, int trials){
		T = trials;
		N = n;
		int count = 0;
		results = new int[T];
		int[] spaces = new int[n*n];
		int row;
		int col;
		for (int j=0;j<n*n;j++){
			spaces[j] = j;
		}
		
		for (int i=0;i<T;i++){
			Percolation perkTrial = new Percolation(N);
			count = 0;
			//Shuffle spaces;
			StdRandom.shuffle(spaces);
			while (!perkTrial.percolates() && count < N*N){
			    row = 1 + spaces[count] / N;
			    col = 1 + spaces[count] % N;
				perkTrial.open(row, col);
				count += 1;
			}
			results[i] = count;
		}
	}
	public double mean(){
		double avg = 0.0;
		for (int i=0;i < T; i++){
			avg += results[i];
		}
		avg = avg / T;
		return avg;
	}
	public double stddev(){
		double avg = mean();
		double deviations = 0.0;
		for (int i=0;i < T; i++){
			deviations += (results[i] - avg) * (results[i] - avg);
		}
		double variance = deviations / T;
		return Math.sqrt(variance);
	}
	public double confidenceLo(){
		return mean() - 1.96*stddev()/Math.sqrt(T);
	}
	public double confidenceHi(){
		return mean() + 1.96*stddev()/Math.sqrt(T);
	}
}
	
public class HelloWorld {
	
    public static void main(String[] args) {
        // Prints "Hello, World" to the terminal window.
        System.out.println("Hello, World");

        
        PercolationStats PS = new PercolationStats(5,10);
        System.out.println(PS.mean());
        
    }

}

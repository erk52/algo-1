
class Percolation 
	{
		private int[] grid;
		private int TOP;
		private int BOTTOM;
		private int n;
		private WeightedQuickUnionUF myUnion;

		public Percolation(int N){
			n = N;
			grid = new int[n*n];
			for (int i = 0; i < n*n; i++){
				grid[i] = 0;
			}
			myUnion = new WeightedQuickUnionUF(n*n+2);
			TOP = n*n;
			BOTTOM = n*n+1;
			for (int j = 0; j < n; j++){
				//Connect first row to top
				myUnion.union(TOP,j);
				myUnion.union(BOTTOM, n*n-1-j);
			}
		}

		private int rcToIndex(int row, int col){
			int index = (row - 1)*n + (col-1);
			return index;
		}

		public void open(int row, int col){
			int index = (row - 1)*n + (col-1);
			grid[index] = 1;
			//Check neighbors
			int neigh;
			if ((row+1) <= n){
				neigh = row*n + col-1;
				myUnion.union(index,neigh);
			}
			if ((row-1) >= 1){
				neigh = (row-2)*n + col-1;
				myUnion.union(index,neigh);
			}
			if ((col+1) <= n){
				neigh = (row - 1)*n + (col);
				myUnion.union(index,neigh);
			}
			if ((col-1) >= 1){
				neigh = (row - 1)*n + (col-2);
				myUnion.union(index,neigh);
			}



		}
		public boolean isOpen(int row, int col){
			int index = (row - 1)*n + (col-1);
			return grid[index] == 1;
		}
		public boolean isFull(int row, int col){
			int index = (row - 1)*n + (col-1);
			return myUnion.connected(index, n*n);
		}
		public int numberOfOpenSites(){
			int arr_sum = 0;
			for (int i=0;i<n*n;i++){
				arr_sum += grid[i];
			}
			return arr_sum;
		}
		public boolean percolates(){
			return myUnion.connected(TOP,BOTTOM);
		}
	}
class WeightedQuickUnionUF
	{
		private int[] id;
		private int[] size;

		public WeightedQuickUnionUF(int N){
			id = new int[N];
			size = new int[N];
			for (int i = 0; i < N; i++){
				id[i] = i;
				size[i] = 1;
			}
		}
		private int root(int i){
			while (i != id[i]){
				i = id[i];
			}
			return i;
		}

		public boolean connected(int p, int q){
			return root(p) == root(q);
		}

		public void union(int p, int q){
			int i = root(p);
			int j = root(q);
			if (i == j) return;
			if (size[i] < size[j]){
				id[i] = j;
				size[j] += size[i];
			}
			else {
				id[j] = i;
				size[i] += size[j];
			}
		}
	}
public class HelloWorld {
	
    public static void main(String[] args) {
        // Prints "Hello, World" to the terminal window.
        System.out.println("Hello, World");

        
        Percolation myPerk = new Percolation(5);
        myPerk.open(1,1);
        myPerk.open(1,2);
        myPerk.open(1,4);
        myPerk.open(1,3);
        myPerk.open(1,5);
        System.out.println(myPerk.percolates());
    }

}
